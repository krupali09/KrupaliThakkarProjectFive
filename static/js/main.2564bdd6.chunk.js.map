{"version":3,"sources":["GiphyForm.js","GiphyList.js","App.js","serviceWorker.js","index.js"],"names":["GiphyForm","props","handleChange","event","setState","search","target","value","state","className","onSubmit","handleSearch","type","placeholder","name","this","onChange","autoComplete","onClick","Component","GiphyList","gifs","removeGifs","clearGifs","App","userSelection","preventDefault","axios","url","method","responseType","params","api_key","q","limit","then","response","console","log","data","gif","map","giphy","src","images","downsized_large","alt","title","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2564bdd6.chunk.js","sourcesContent":["//Allow the users to select the images\r\n//Allow users to clear the images from the page\r\n//Pass the function back to App.js\r\n\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass GiphyForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            search: ''\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            search: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <form className=\"form\" onSubmit={(event) => { this.props.handleSearch(event, this.state.search) }}>\r\n                    <input className=\"inputText\" type=\"text\" placeholder=\"Keep On Giffing\" name=\"search\" value={this.state.search} onChange={this.handleChange} autoComplete=\"off\" />\r\n                    <input type=\"submit\" value=\"Search\" />\r\n                    <button className=\"button\" onClick={this.props.handleSearch}>Clear All</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GiphyForm;","import React, { Component } from 'react';\r\nimport GiphyForm from './GiphyForm';\r\nimport './App.css';\r\n\r\nclass GiphyList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gifs: []\r\n        }\r\n    }\r\n\r\n    clearGifs() {\r\n        this.setState({\r\n            gifs: []\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <GiphyForm handleSearch={this.props.handleSearch} removeGifs={this.clearGifs} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GiphyList;","//get a list of giphy from API and save them in state\n//Print them on the page with .map\n//Install Axios and form for getting user selection\n//Run the constructor and set initial properties on the component\n//get functions from GiphyList.js & GiphyForm.js\n//Render the method after the constructor\n//Render the images on the page\n\n\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport GiphyList from './GiphyList';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      gif: []\n    }\n  }\n\n  handleSearch = (event, userSelection) => {\n    event.preventDefault()\n    axios({\n      url: `http://api.giphy.com/v1/gifs/search?`,\n      method: `GET`,\n      responseType: `JSON`,\n      params: {\n        api_key: `dAuwo6dniKEMHLAGEmCjv6bYaWyVN5em`,\n        q: userSelection,\n        limit: 6\n      }\n    }).then((response) => {\n      console.log(response.data.data);\n      this.setState({\n        gif: response.data.data\n      })\n    });\n  }\n\n  removeGifs = (event) => {\n    event.preventDefault()\n    this.setState({\n      gif: ''\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1>Search Your Favourite Gif</h1>\n        <GiphyList handleSearch={this.handleSearch} />\n        <div className=\"gifParent\">\n        \n        {\n          this.state.gif.map((giphy) => {\n            return ( \n                <img src={giphy.images.downsized_large.url} alt={giphy.title} />\n            );\n          })\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}