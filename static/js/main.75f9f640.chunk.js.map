{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","performSearch","query","console","log","axios","method","url","dataResponse","params","api_key","q","limit","then","response","setState","gifs","data","loading","state","this","map","giphy","key","id","title","src","images","downsized_large","alt","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iRAwDeA,E,kDAnDb,aAAe,IAAD,8BACZ,gBAWFC,cAAgB,SAACC,GACfC,QAAQC,IAAI,eACZC,IAAM,CACJC,OAAQ,MACRC,IAAI,uCACJC,aAAc,OACdC,OAAQ,CACNC,QAAQ,mCACRC,EAAG,QACHC,MAAO,KAERC,MAAK,SAACC,GACP,EAAKC,SAAS,CACZC,KAAMF,EAASG,KAAKA,KACpBC,SAAS,QAxBb,EAAKC,MAAQ,CACXH,KAAM,GACNE,SAAS,GAJC,E,gEASZE,KAAKnB,kB,+BAwBL,OADAE,QAAQC,IAAI,wBAEV,6BACE,iDAEEgB,KAAKD,MAAMH,KAAKK,KAAI,SAACC,GACnB,OACE,yBAAKC,IAAKD,EAAME,IACd,4BAAKF,EAAMG,OACX,yBAAKC,IAAKJ,EAAMK,OAAOC,gBAAgBrB,IAAKsB,IAAKP,EAAMG,iB,GA3CrDK,aCSZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTzB,MAAK,SAAA8B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1B,QACfqB,UAAUC,cAAcO,YAI1B7C,QAAQC,IACN,iHAKEmC,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBxC,QAAQC,IAAI,sCAGRmC,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACLjD,QAAQiD,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,6BAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,6BAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BnD,MAAK,SAAAC,GAEJ,IAAMmD,EAAcnD,EAASkD,QAAQE,IAAI,gBAEnB,MAApBpD,EAASqD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMxD,MAAK,SAAA8B,GACjCA,EAAa2B,aAAazD,MAAK,WAC7BoB,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1BY,OAAM,WACLhD,QAAQC,IACN,oEAvFAoE,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMxD,MAAK,WACjCV,QAAQC,IACN,iHAMJiC,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.75f9f640.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      gifs: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.performSearch();\n  }\n\n  performSearch = (query) => {\n    console.log('please work');\n    axios({\n      method: 'GET',\n      url: `https://api.giphy.com/v1/gifs/search`,\n      dataResponse: 'json',\n      params: {\n        api_key: `dAuwo6dniKEMHLAGEmCjv6bYaWyVN5em`,\n        q: 'query',\n        limit: 6\n      }\n    }).then((response) => {\n      this.setState({\n        gifs: response.data.data,\n        loading: false\n      });\n    })\n  }\n\n  render() {\n    console.log('display data on page');\n    return (\n      <div>\n        <h1>Show me some Gifs</h1>\n        {\n          this.state.gifs.map((giphy) => {\n            return (\n              <div key={giphy.id}>\n                <h2>{giphy.title}</h2>\n                <img src={giphy.images.downsized_large.url} alt={giphy.title} />\n              </div>\n            );\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}